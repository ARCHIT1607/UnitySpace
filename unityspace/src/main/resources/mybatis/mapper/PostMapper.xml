<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.asm63.unityspace.mappers.PostMapper">

    <resultMap id="PostResultMap" type="Post">
        <id column="id" property="id" />
        <result column="description" property="description" />
        <result column="firstname" property="firstname" />
        <result column="lastname" property="lastname" />
        <result column="course" property="course" />
        <result column="location" property="location" />
        <result column="picture_path" property="picturePath" />
        <result column="post_user_id" property="postUserId" />
        <result column="user_picture_path" property="userPicturePath" />
        <result column="likes" property="likes" />
        <result column="created_date" property="createdDate" />
        <result column="created_by" property="createdBy" />
    </resultMap>



    <select id="findPostById" parameterType="Long"
            resultType="Post">
        SELECT id,post_user_id AS "postUserId",description,course,location,picture_path,user_picture_path,likes,firstname,lastname, created_date  from post where id = #{id}
    </select>

    <select id="getPosts"
            resultType="HashMap">
        SELECT id,post_user_id AS "postUserId",description,course,location,picture_path as "picturePath",user_picture_path as "userPicturePath" ,
               likes,firstname,lastname, created_date from post ORDER BY id desc
    </select>

    <select id="getResource" parameterType="String" resultType="Post">
        SELECT picture from post where picture_path =#{picturePath}
    </select>

    <select id="getUserResource" parameterType="String" resultType="Student">
        SELECT profile_pic as "profilePic" from student where picture_name =#{picturePath}
    </select>

    <select id="getUserPosts" parameterType="String"
            resultType="HashMap">
        SELECT id,post_user_id as "postUserId",description,course,location,picture_path as "picturePath",user_picture_path as "userPicturePath",likes,firstname,lastname, created_date
        from post where post_user_id = #{userId} order by id desc
    </select>

    <select id="getUserPostLikes" parameterType="String"
            resultType="String">
        SELECT likes  from post where post_user_id = #{userId}
    </select>

    <select id="getLikes" parameterType="Long" resultType="String"
    >
        SELECT likes from post where id = #{postId}
    </select>

    <update id="updatePostLike">
        UPDATE
            post SET
            LIKES = COALESCE(#{likes}, LIKES)
        WHERE id=#{id}
    </update>

    <update id="inActiveEvent">
        UPDATE
            event SET
            is_active = false
        WHERE id=#{id}
    </update>

    <update id="updateDaysLeft">
        UPDATE
            event SET
            days_left = #{daysLeft}
        WHERE id=#{id}
    </update>

    <update id="updatePost">
        UPDATE
            post SET
            description = #{description}

        <if test="picturePath != null">
            ,picture_path =#{picturePath}
        </if>
        <if test="picture != null">
            ,picture =#{picture}
        </if>
        WHERE id=#{id}
    </update>

    <insert id="createEvent" parameterType="Event">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('EVENT_SEQ')
        </selectKey>
        INSERT INTO
        event
        (id,event_name,event_date,is_active,days_left,created_date)
        VALUES(#{id},#{eventName},#{eventDate},
        #{isActive},#{daysLeft},#{createdDate})
    </insert>


    <select id="findCommentByPostId" parameterType="Long"
            resultType="HashMap">
        SELECT comment, user_id as "sid" from comment where post_id = #{postId}
    </select>

    <select id="getAllComments"
            resultType="String">
        SELECT comment from comment
    </select>

    <select id="getAllPostDescription"
            resultType="String">
        SELECT description from post
    </select>

    <insert id="postComment" parameterType="Comment">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('COMMENT_SEQ')
        </selectKey>
        INSERT INTO
        comment
        (id,comment,post_id,user_id)
        VALUES(#{id},#{comment},#{postId},
        #{userId})
    </insert>

<!--    <update id="postComment" parameterType="Comment">-->
<!--        UPDATE post SET comments = ARRAY[-->
<!--        <foreach item="comment" index="index" collection="comments" separator=",">-->
<!--            #{comment}-->
<!--        </foreach>-->
<!--        ]-->
<!--        WHERE id=#{id}-->
<!--    </update>-->

    <insert id="createPost" parameterType="Post">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('POST_SEQ')
        </selectKey>
        INSERT INTO
        post
        (id,post_user_id,description,course,location,picture_path,user_picture_path,
        created_date,created_by,likes,firstname,lastname,picture)
        VALUES(#{id},#{postUserId},#{description},
        #{course},#{location},#{picturePath},#{userPicturePath},
        #{createdDate},#{createdBy},
        <if test="likes != null">
            likes =#{likes},
        </if>
        <if test="likes == null">
            NULL,
        </if>
        #{firstname},#{lastname}, #{picture})
    </insert>

    <insert id="createPostWithoutPicture" parameterType="Post">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('POST_SEQ')
        </selectKey>
        INSERT INTO
        post
        (id,post_user_id,description,course,location,user_picture_path,
        created_date,created_by,likes,firstname,lastname)
        VALUES(#{id},#{postUserId},#{description},
        #{course},#{location},#{userPicturePath},
        #{createdDate},#{createdBy},
        <if test="likes != null">
            likes =#{likes},
        </if>
        <if test="likes == null">
            NULL,
        </if>
        #{firstname},#{lastname})
    </insert>

    <delete id="deletePost" parameterType="Long">
        delete from post where id = #{postId}
    </delete>

    <delete id="deleteEvent" parameterType="Long">
        delete from event where id = #{id}
    </delete>

    <select id="getEvents"
            resultType="Event">
        SELECT id, event_name as "eventName", created_date as "CreatedDate", event_date as "eventDate", is_active as "active", days_left as "daysLeft" from event where is_active = TRUE ORDER BY event_date desc
    </select>


    <delete id="deletedUserPost" parameterType="String">
        delete from post where post_user_id = #{userId}
    </delete>


</mapper>