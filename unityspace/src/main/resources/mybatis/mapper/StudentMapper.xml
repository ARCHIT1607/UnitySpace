<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.asm63.unityspace.mappers.StudentMapper">

    <resultMap id="StudentResultMap" type="Student">
        <id column="id" property="id" />
        <result column="sid" property="sid" />
        <result column="fname" property="fname" />
        <result column="lname" property="lname" />
        <result column="email" property="email" />
        <result column="password" property="password" />
        <result column="loc" property="loc" />
        <result column="course" property="course" />
        <result column="role" property="role" />
        <result column="profile_pic" property="profilePic" />
        <result column="picture_name" property="pictureName" />
        <result column="is_online_status" property="isOnlineStatus" />
    </resultMap>

    <resultMap id="FriendResultMap" type="Friend">
        <id column="id" property="id" />
        <result column="student_id" property="studentId" />
        <result column="friend_id" property="friendId" />
    </resultMap>

    <resultMap id="PostResultMap" type="Post">
        <id column="id" property="id" />
        <result column="description" property="description" />
        <result column="firstname" property="firstname" />
        <result column="lastname" property="lastname" />
        <result column="location" property="location" />
        <result column="picture_path" property="picturePath" />
        <result column="post_user_id" property="postUserId" />
        <result column="user_picture_path" property="userPicturePath" />
        <result column="likes" property="likes" />
    </resultMap>

    <select id="findByEmail" parameterType="String"
            resultMap="StudentResultMap">
        select id,sid,email,fname,lname,password,loc,course,role,picture_name, is_online_status as "_online_status" from student where UPPER(email) =UPPER(#{email})
    </select>

    <select id="findByFriendId" parameterType="String"
            resultType="Student">
        select * from student where sid =#{friendId}
    </select>

    <insert id="register" parameterType="Student">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('STUDENT_SEQ')
        </selectKey>
        INSERT INTO
        student
        (id,sid,email,fname,lname,password,loc,course,role,profile_pic,picture_name)
        VALUES(#{id},#{sid},#{email},#{fname},#{lname},
        #{password},#{loc},#{course},#{role},#{profilePic},#{pictureName})
    </insert>


    <insert id="sendFriendRequest" parameterType="FriendRequest" >
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('FRIEND_REQ_SEQ')
        </selectKey>
        INSERT INTO
        friend_request
        (id,sender_id,friend_id,status)
        VALUES(#{id},#{senderId},#{friendId},#{status})
    </insert>

    <insert id="addFriend" parameterType="Friend" >
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
        select
            nextval('FRIEND_SEQ')
    </selectKey>
        INSERT INTO
            friend_list
            (id,friend_id,student_id)
        VALUES(#{id},#{friendId},#{studentId})
    </insert>

    <select id="checkFriendRequest"
            resultType="HashMap" parameterType="String">
        SELECT student.fname, student.lname, student.sid
        FROM friend_request
                 INNER JOIN student ON student.sid = friend_request.sender_id WHERE friend_request.friend_id =#{friendId}
                                                                                and friend_request.status ='Pending'
    </select>

    <select id="checkFriendRequestExists" parameterType="FriendRequest"
            resultType="HashMap">
        SELECT friend_id as "friendId ",sender_id as "senderId" from friend_request
                                                                where sender_id = #{senderId} and
                                                                      friend_id =#{friendId} and status = 'Pending'
    </select>

    <select id="getFriends"
            resultType="HashMap" parameterType="String">
        SELECT friend_list.id, student.course, student.fname, student.lname,student.sid, student.picture_name, student.is_online_status as "onlineStatus"
        FROM friend_list
                 INNER JOIN student ON friend_list.friend_id = student.sid WHERE friend_list.student_id =#{userId}
    </select>

    <delete id="deleteFriend" parameterType="String"  >
        delete from friend_list where  student_id = #{id} and friend_id = #{friendId}
    </delete>

    <delete id="deleteFriendRequest" parameterType="String"  >
        delete from friend_request where  friend_id = #{friendId} and sender_id = #{senderId} and status = 'Pending'
    </delete>

    <select id="findById" parameterType="String"
            resultType="Student">
        SELECT id,sid,email,fname,lname,password,loc,course,role,impressions,viewed_profile as "viewedProfile", picture_name as "pictureName",is_online_status  from student where sid = #{id}
    </select>

    <select id="findAllStudent"
            resultType="HashMap">
        SELECT fname, sid from student
    </select>


    <select id="findPostById" parameterType="Long"
            resultType="Post">
        SELECT id,post_user_id AS "postUserId",description,location,picture_path,user_picture_path,likes,comments,firstname,lastname  from post where id = #{id}
    </select>

    <select id="getPosts"
            resultType="HashMap">
        SELECT id,post_user_id AS "postUserId",description,location,picture_path as "picturePath",user_picture_path as "userPicturePath" ,likes,comments,firstname,lastname from post
    </select>

    <select id="getResource" parameterType="String" resultType="Post">
        SELECT picture from post where picture_path =#{picturePath}
    </select>

    <select id="getUserResource" parameterType="String" resultType="Student">
        SELECT profile_pic as "profilePic" from student where picture_name =#{picturePath}
    </select>

    <select id="getUserPosts" parameterType="String"
            resultType="HashMap">
        SELECT id,post_user_id as "postUserId",description,location,picture_path as "picturePath",user_picture_path as "userPicturePath",likes,comments,firstname,lastname  from post where post_user_id = #{userId}
    </select>

    <select id="getUserPostLikes" parameterType="String"
            resultType="String">
        SELECT likes  from post where post_user_id = #{userId}
    </select>

    <select id="getLikes" parameterType="Long" resultType="String"
            >
        SELECT likes from post where id = #{postId}
    </select>

    <update id="updatePost">
        UPDATE
            post SET
            LIKES = COALESCE(#{likes}, LIKES)
        WHERE id=#{id}
    </update>

    <update id="updateImpression">
        UPDATE
            student SET
            impressions = #{likeCount}
        WHERE sid=#{userId}
    </update>

    <update id="updateViewer">
        UPDATE
            student SET
            viewed_profile = #{sid}
        WHERE sid=#{userId}
    </update>

    <update id="updateFriendRequestStatus">
        UPDATE
            friend_request SET
            status = 'Accepted'
        WHERE sender_id=#{friendId}
    </update>

    <select id="findCommentByPostId" parameterType="Post"
            resultType="String">
        SELECT comments  from post where id = #{id}
    </select>

    <update id="postComment" parameterType="Post">
        UPDATE post SET comments = ARRAY[
        <foreach item="comment" index="index" collection="comments" separator=",">
            #{comment}
        </foreach>
        ]
        WHERE id=#{id}
    </update>

    <insert id="createPost" parameterType="Post">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('POST_SEQ')
        </selectKey>
        INSERT INTO
            post
            (id,post_user_id,description,location,picture_path,user_picture_path,likes,comments,firstname,lastname, picture)
        VALUES(#{id},#{postUserId},#{description},
               #{location},#{picturePath},#{userPicturePath},
        <if test="likes != null">
            likes =#{likes},
        </if>
        <if test="likes == null">
            NULL,
        </if>
        <if test="comments != null and comments != ''">
            #{comments}),
        </if>
        <if test="comments == null">
            NULL,
        </if>
        #{firstname},#{lastname},#{picture})
    </insert>

    <delete id="deletePost" parameterType="Long">
        delete from post where id = #{postId}
    </delete>

    <select id="getEvents"
            resultType="Event">
        SELECT id, event_name as "eventName", created_date as "CreatedDate", event_date as "eventDate", is_active as "active" from event where is_active = TRUE
    </select>

    <insert id="addFirebaseToken" parameterType="CloudMessage" >
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            select
            nextval('FIREBASE_TOKEN_SEQ')
        </selectKey>
        INSERT INTO
        fb_cloud_message
        (id,firebase_token,user_id)
        VALUES(#{id},#{firebase_token},#{userId})
    </insert>

    <select id="getToken"
            resultType="String">
        SELECT firebase_token from fb_cloud_message where user_id = #{postUserId}
    </select>

    <select id="getAllTokens"
            resultType="ArrayList">
        SELECT firebase_token from fb_cloud_message
    </select>

    <update id="updateOnlineStatus">
        UPDATE
            student SET
            is_online_status = #{status}
        WHERE sid=#{userId}
    </update>

    <delete id="deletedUserFriends" parameterType="String">
        delete from friend_list where friend_id = #{userId} OR student_id =#{userId}
    </delete>

    <delete id="deleteUser" parameterType="String">
        delete from student where sid = #{userId}
    </delete>

    <select id="getAllOnlineStatus"
            resultType="HashMap">
        SELECT is_online_status as "onlineStatus" from student where is_online_status = true
    </select>


</mapper>